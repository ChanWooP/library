set foreign_key_checks = 0;

DROP TABLE if exists setting;
CREATE TABLE setting (
	SET_ID VARCHAR(255) NOT NULL PRIMARY KEY
	, SET_NAME VARCHAR(255) NOT NULL
	, SET_TYPE VARCHAR(255)
	, SET_VALUE VARCHAR(255)
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
) DEFAULT CHARACTER SET UTF8;
INSERT INTO setting(SET_ID, SET_NAME, SET_TYPE, SET_VALUE, CREATE_BY, CREATE_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_DATE) 
VALUES('loanDate',' 대출기간', 'INTEGER', '14', 'system', NOW(), 'system', NOW());
INSERT INTO setting(SET_ID, SET_NAME, SET_TYPE, SET_VALUE, CREATE_BY, CREATE_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_DATE) 
VALUES('loanCnt',' 대출권수', 'INTEGER', '5', 'system', NOW(), 'system', NOW());

DROP TABLE if exists users;
CREATE TABLE users (
	USER_ID VARCHAR(255) NOT NULL PRIMARY KEY 
	, USER_PASSWORD VARCHAR(255) NOT NULL
	, USER_NAME VARCHAR(255)
	, USER_SEX VARCHAR(1) CHECK(USER_SEX IN ('M', 'W'))
	, USER_BIRTH VARCHAR(10)
	, USER_AUTHORITY VARCHAR(10)
	, USER_LOGIN_FAIL_CNT INT 
	, USER_FIND_PASSWORD_YN VARCHAR(1) CHECK(USER_FIND_PASSWORD_YN IN ('Y', 'N'))
	, USER_OAUTH_TYPE VARCHAR(255)
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
) DEFAULT CHARACTER SET UTF8;

DROP TABLE if exists login_token;
CREATE TABLE login_token
(
	  LOGIN_TOKEN_SERIES VARCHAR(255) NOT NULL PRIMARY KEY
	, LOGIN_TOKEN_USERNAME VARCHAR(255) NOT NULL
	, LOGIN_TOKEN VARCHAR(255) NOT NULL
	, LOGIN_TOKEN_LAST_USED VARCHAR(255) NOT NULL
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS book_category;
CREATE TABLE book_category
(
	  CATEGORY_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
	, CATEGORY_NAME VARCHAR(255) NOT NULL
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS book;
CREATE TABLE book
(
	  BOOK_ISBN VARCHAR(255) NOT NULL PRIMARY KEY
	, BOOK_CATEGORY_ID INTEGER
	, BOOK_TITLE VARCHAR(255)
	, BOOK_AUTHOR VARCHAR(255)
	, BOOK_PUBLISHER VARCHAR(255)
	, BOOK_DISTRIBUTOR VARCHAR(255)
	, BOOK_PUBLICATION_YEAR VARCHAR(10)
	, BOOK_INDEX TEXT
	, BOOK_INT TEXT
	, BOOK_AUTHOR_INT TEXT
	, BOOK_IMAGE VARCHAR(255)
	, BOOK_MAX_LOAN_CNT INTEGER
	, BOOK_MAX_RESERVE_CNT INTEGER
	, BOOK_LIKE INTEGER
	, BOOK_LOAN_CNT INTEGER
	, BOOK_RESERVE_CNT INTEGER
	, BOOK_TOTAL_PAGE_CNT INTEGER
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
	, FOREIGN KEY(BOOK_CATEGORY_ID) REFERENCES book_category(CATEGORY_ID) ON DELETE CASCADE
) DEFAULT CHARACTER SET UTF8;
CREATE INDEX IDX_BOOK_CATEGORY ON book(BOOK_CATEGORY_ID);
CREATE INDEX IDX_BOOK_TITLE ON book(BOOK_TITLE);

DROP TABLE IF EXISTS book_loan;
CREATE TABLE book_loan
(
	  LOAN_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
	, LOAN_ISBN VARCHAR(255) NOT NULL
	, LOAN_DATE DATETIME NOT NULL
	, LOAN_RETURN_DATE DATETIME
	, LOAN_USER VARCHAR(255) NOT NULL
	, LOAN_RETURN_YN VARCHAR(1) CHECK(LOAN_RETURN_YN IN ('Y', 'N'))
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
	, FOREIGN KEY(LOAN_ISBN) REFERENCES book(BOOK_ISBN) ON DELETE CASCADE
	, FOREIGN KEY(LOAN_USER) REFERENCES users(USER_ID) ON DELETE CASCADE
) DEFAULT CHARACTER SET UTF8;
CREATE INDEX IDX_BOOK_LOAN_BOOK ON book_loan(LOAN_RETURN_YN, LOAN_ISBN);
CREATE INDEX IDX_BOOK_LOAN_USER ON book_loan(LOAN_RETURN_YN, LOAN_USER);
CREATE INDEX IDX_BOOK_LOAN_HIS ON book_loan(LOAN_USER, LOAN_DATE);

DROP TABLE IF EXISTS book_reserve;
CREATE TABLE book_reserve
(
	  RESERVE_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
	, RESERVE_ISBN VARCHAR(255) NOT NULL
	, RESERVE_DATE DATETIME NOT NULL
	, RESERVE_USER VARCHAR(255) NOT NULL
	, RESERVE_STATUS VARCHAR(10) NOT NULL
	, CREATE_BY VARCHAR(255) 
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
	, FOREIGN KEY(RESERVE_ISBN) REFERENCES book(BOOK_ISBN) ON DELETE CASCADE
	, FOREIGN KEY(RESERVE_USER) REFERENCES users(USER_ID) ON DELETE CASCADE
) DEFAULT CHARACTER SET UTF8;
CREATE INDEX IDX_BOOK_RESERVE_BOOK ON book_reserve(RESERVE_STATUS, RESERVE_ISBN);
CREATE INDEX IDX_BOOK_RESERVE_USER ON book_reserve(RESERVE_STATUS, RESERVE_USER);
CREATE INDEX IDX_BOOK_RESERVE_HIS ON book_reserve(RESERVE_USER, RESERVE_DATE);

DROP TABLE IF EXISTS book_hope;
CREATE TABLE book_hope
(
	  HOPE_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
	, HOPE_USER VARCHAR(255) NOT NULL
	, HOPE_ISBN VARCHAR(255) NOT NULL
	, HOPE_TITLE VARCHAR(255) NOT NULL
	, HOPE_AUTHOR VARCHAR(255) NOT NULL
	, HOPE_PUBLISHER VARCHAR(255) NOT NULL
	, HOPE_DATE VARCHAR(255) NOT NULL
	, HOPE_STATUS VARCHAR(10) NOT NULL
	, CREATE_BY VARCHAR(255) 
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
	, FOREIGN KEY(HOPE_USER) REFERENCES users(USER_ID) ON DELETE CASCADE
) DEFAULT CHARACTER SET UTF8;
CREATE INDEX IDX_BOOK_HOPE ON book_hope(HOPE_STATUS, HOPE_DATE);
CREATE INDEX IDX_BOOK_HOPE_TITLE ON book_hope(HOPE_STATUS, HOPE_DATE, HOPE_TITLE);
CREATE INDEX IDX_BOOK_HOPE_ISBN ON book_hope(HOPE_STATUS, HOPE_DATE, HOPE_ISBN);
CREATE INDEX IDX_BOOK_HOPE_HIS ON book_hope(HOPE_USER, HOPE_DATE);

DROP TABLE IF EXISTS qna;
CREATE TABLE qna
(
	  QNA_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
	, QNA_USER VARCHAR(255) NOT NULL
	, QNA_DATE VARCHAR(10) NOT NULL
	, QNA_QUESTION TEXT
	, QNA_ANSWER TEXT
	, QNA_ANSWER_YN VARCHAR(1)
	, CREATE_BY VARCHAR(255) 
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
	, FOREIGN KEY(QNA_USER) REFERENCES users(USER_ID) ON DELETE CASCADE
) DEFAULT CHARACTER SET UTF8;
CREATE INDEX IDX_QNA ON qna(QNA_DATE);
CREATE INDEX IDX_QNA_USER ON qna(QNA_USER, QNA_DATE);

DROP TABLE IF EXISTS notify;
CREATE TABLE notify
(
	  NOTIFY_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
	, NOTIFY_TYPE VARCHAR(10)
	, NOTIFY_TITLE VARCHAR(255)
	, NOTIFY_TEXT TEXT
	, NOTIFY_IMG VARCHAR(255)
	, NOTIFY_START_DT VARCHAR(10)
	, NOTIFY_END_DT VARCHAR(10)
	, CREATE_BY VARCHAR(255) 
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
) DEFAULT CHARACTER SET UTF8;
CREATE INDEX IDX_NOTIFY ON notify(NOTIFY_START_DT, NOTIFY_END_DT);

DROP TABLE if exists user_like;
CREATE TABLE user_like (
	LIKE_USER VARCHAR(255) NOT NULL
	, LIKE_ISBN VARCHAR(255) NOT NULL
	, CREATE_BY VARCHAR(255)
	, CREATE_DATE DATETIME
	, LAST_MODIFIED_BY VARCHAR(255)
	, LAST_MODIFIED_DATE DATETIME
	, PRIMARY KEY (LIKE_USER, LIKE_ISBN)
	, FOREIGN KEY (LIKE_USER) REFERENCES users (USER_ID) ON DELETE CASCADE
	, FOREIGN KEY (LIKE_ISBN) REFERENCES book (BOOK_ISBN) ON DELETE CASCADE
) DEFAULT CHARACTER SET UTF8;

-- Autogenerated: do not edit this file
DROP TABLE if exists BATCH_JOB_INSTANCE;
CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ;

DROP TABLE if exists BATCH_JOB_EXECUTION;
CREATE TABLE BATCH_JOB_EXECUTION (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME TIMESTAMP NOT NULL,
	START_TIME TIMESTAMP ,
	END_TIME TIMESTAMP ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

DROP TABLE if exists BATCH_JOB_EXECUTION_PARAMS;
CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	PARAMETER_NAME VARCHAR(100) NOT NULL ,
	PARAMETER_TYPE VARCHAR(100) NOT NULL ,
	PARAMETER_VALUE VARCHAR(2500) ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

DROP TABLE if exists BATCH_STEP_EXECUTION;
CREATE TABLE BATCH_STEP_EXECUTION (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	CREATE_TIME TIMESTAMP NOT NULL,
	START_TIME TIMESTAMP  ,
	END_TIME TIMESTAMP ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP,
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

DROP TABLE if exists BATCH_STEP_EXECUTION_CONTEXT;
CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

DROP TABLE if exists BATCH_JOB_EXECUTION_CONTEXT;
CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

DROP SEQUENCE if exists BATCH_STEP_EXECUTION_SEQ;
DROP SEQUENCE if exists BATCH_JOB_EXECUTION_SEQ;
DROP SEQUENCE if exists BATCH_JOB_SEQ;
CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_SEQ;
